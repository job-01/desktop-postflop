#![cfg_attr(
    all(not(debug_assertions), target_os = "windows"),
    windows_subsystem = "windows"
)]

mod bunching;
mod range;
mod solver;
mod tree;
use crate::bunching::*;
use crate::range::*;
use crate::solver::*;
use crate::tree::*;

use postflop_solver::*;
use rayon::{ThreadPool, ThreadPoolBuilder};
use std::sync::Mutex;
use sysinfo::{System, SystemExt};

// State struct to hold solver and allowed runouts
struct AppState {
    range_manager: Mutex<RangeManager>,
    action_tree: Mutex<ActionTree>,
    bunching_data: Mutex<Option<BunchingData>>,
    game: Mutex<PostFlopGame>,
    thread_pool: Mutex<ThreadPool>,
    allowed_runouts: Mutex<Option<Vec<String>>>, // New field for selected cards
}

fn main() {
    tauri::Builder::default()
        .manage(AppState {
            range_manager: Mutex::new(RangeManager::default()),
            action_tree: Mutex::new(default_action_tree()),
            bunching_data: Mutex::new(None),
            game: Mutex::new(PostFlopGame::default()),
            thread_pool: Mutex::new(ThreadPoolBuilder::new().build().unwrap()),
            allowed_runouts: Mutex::new(None),
        })
        .invoke_handler(tauri::generate_handler![
            os_name,
            memory,
            set_num_threads,
            range_num_combos,
            range_clear,
            range_invert,
            range_update,
            range_from_string,
            range_to_string,
            range_get_weights,
            range_raw_data,
            tree_new,
            tree_added_lines,
            tree_removed_lines,
            tree_invalid_terminals,
            tree_actions,
            tree_is_terminal_node,
            tree_is_chance_node,
            tree_back_to_root,
            tree_apply_history,
            tree_play,
            tree_total_bet_amount,
            tree_add_bet_action,
            tree_remove_current_node,
            tree_delete_added_line,
            tree_delete_removed_line,
            bunching_init,
            bunching_clear,
            bunching_progress,
            game_init,
            game_private_cards,
            game_memory_usage,
            game_memory_usage_bunching,
            game_allocate_memory,
            game_set_bunching,
            game_solve_step,
            game_exploitability,
            game_finalize,
            game_apply_history,
            game_total_bet_amount,
            game_actions_after,
            game_possible_cards,
            game_get_results,
            game_get_chance_reports,
            set_allowed_runouts // New command
        ])
        .run(tauri::generate_context!())
        .expect("error while running tauri application");
}

#[cfg(target_os = "windows")]
#[tauri::command]
fn os_name() -> String {
    "windows".to_string()
}

#[cfg(target_os = "macos")]
#[tauri::command]
fn os_name() -> String {
    "macos".to_string()
}

#[cfg(target_os = "linux")]
#[tauri::command]
fn os_name() -> String {
    "linux".to_string()
}

#[tauri::command]
fn memory() -> (u64, u64) {
    let mut system = System::new_all();
    system.refresh_memory();
    (system.available_memory(), system.total_memory())
}

#[tauri::command]
fn set_num_threads(pool_state: tauri::State<Mutex<ThreadPool>>, num_threads: usize) {
    *pool_state.lock().unwrap() = ThreadPoolBuilder::new()
        .num_threads(num_threads)
        .build()
        .unwrap();
}

#[tauri::command]
fn set_allowed_runouts(
    cards: Vec<String>,
    state: tauri::State<AppState>,
) -> Result<(), String> {
    let mut allowed_runouts = state.allowed_runouts.lock().unwrap();
    *allowed_runouts = Some(cards);
    println!("Allowed runouts set to: {:?}", *allowed_runouts); // Debug output
    Ok(())
}

// Override game_init to apply allowed runouts
#[tauri::command]
fn game_init(
    state: tauri::State<AppState>,
    oop_range: String,
    ip_range: String,
    board: String,
    starting_pot: i32,
    effective_stack: i32,
    rake_rate: f64,
    rake_cap: f64,
    donk_option: bool,
) -> Result<(), String> {
    let mut game = state.game.lock().unwrap();
    let range_manager = state.range_manager.lock().unwrap();
    let action_tree = state.action_tree.lock().unwrap();

    *game = PostFlopGame::with_text(
        &oop_range,
        &ip_range,
        &board,
        starting_pot,
        effective_stack,
        rake_rate,
        rake_cap,
        donk_option,
        &range_manager,
        &action_tree,
    )
    .map_err(|e| e.to_string())?;

    // Apply allowed runouts if set
    if let Some(ref allowed) = *state.allowed_runouts.lock().unwrap() {
        let allowed_cards: Vec<u8> = allowed
            .iter()
            .map(|card| {
                let rank = "23456789TJQKA"
                    .find(card.chars().next().unwrap())
                    .unwrap_or(0);
                let suit = "♠♥♦♣"
                    .find(card.chars().nth(1).unwrap())
                    .unwrap_or(0);
                (rank * 4 + suit) as u8
            })
            .collect();
        println!("Converted allowed cards: {:?}", allowed_cards); // Debug

        // Filter turn/river cards (pseudo-code, adjust to PostFlopGame)
        let board_cards = game.board();
        let mut solver_cards = Vec::new();
        for &card in &allowed_cards {
            if !board_cards.contains(&card) {
                solver_cards.push(card);
            }
        }
        // Note: PostFlopGame doesn’t have a direct method to set runouts natively.
        // We’ll need to modify game initialization or solver logic.
    }

    Ok(())
}

// Optionally override game_solve_step to respect runouts
#[tauri::command]
fn game_solve_step(
    state: tauri::State<AppState>,
    num_iterations: i32,
) -> Result<f64, String> {
    let mut game = state.game.lock().unwrap();
    let pool = state.thread_pool.lock().unwrap();

    // TODO: Ensure solver respects allowed_runouts during iterations
    pool.install(|| game.solve_step(num_iterations));
    Ok(game.compute_average_ev(0))
}